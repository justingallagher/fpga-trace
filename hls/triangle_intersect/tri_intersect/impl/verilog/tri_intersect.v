// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="tri_intersect,hls_ip_2015_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.440000,HLS_SYN_LAT=51,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=9,HLS_SYN_LUT=50}" *)

module tri_intersect (
        ap_clk,
        ap_rst_n,
        A_TDATA,
        A_TVALID,
        A_TREADY,
        A_TKEEP,
        A_TSTRB,
        A_TUSER,
        A_TLAST,
        A_TID,
        A_TDEST,
        B_TDATA,
        B_TVALID,
        B_TREADY,
        B_TKEEP,
        B_TSTRB,
        B_TUSER,
        B_TLAST,
        B_TID,
        B_TDEST
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 2'b1;
parameter    ap_ST_st2_fsm_1 = 2'b10;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv6_32 = 6'b110010;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] A_TDATA;
input   A_TVALID;
output   A_TREADY;
input  [3:0] A_TKEEP;
input  [3:0] A_TSTRB;
input  [1:0] A_TUSER;
input  [0:0] A_TLAST;
input  [4:0] A_TID;
input  [5:0] A_TDEST;
output  [31:0] B_TDATA;
output   B_TVALID;
input   B_TREADY;
output  [3:0] B_TKEEP;
output  [3:0] B_TSTRB;
output  [1:0] B_TUSER;
output  [0:0] B_TLAST;
output  [4:0] B_TID;
output  [5:0] B_TDEST;

reg A_TREADY;
reg B_TVALID;
reg    ap_rst_n_inv;
wire   [5:0] i_1_fu_121_p2;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm = 2'b1;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_37;
wire   [0:0] exitcond_fu_115_p2;
reg    ap_sig_bdd_45;
reg    ap_sig_ioackin_B_TREADY;
reg   [5:0] i_reg_103;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_60;
reg    ap_reg_ioackin_B_TREADY = 1'b0;
reg   [1:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_B_TREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_B_TREADY
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_115_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_45 | ((exitcond_fu_115_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY))))) begin
            ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_115_p2 == ap_const_lv1_0) & ~ap_sig_bdd_45 & (ap_const_logic_1 == B_TREADY))) begin
            ap_reg_ioackin_B_TREADY <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_115_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_45 | ((exitcond_fu_115_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY))))) begin
        i_reg_103 <= i_1_fu_121_p2;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) begin
        i_reg_103 <= ap_const_lv6_0;
    end
end

/// A_TREADY assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_115_p2 or ap_sig_bdd_45 or ap_sig_ioackin_B_TREADY)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_115_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_45 | ((exitcond_fu_115_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY))))) begin
        A_TREADY = ap_const_logic_1;
    end else begin
        A_TREADY = ap_const_logic_0;
    end
end

/// B_TVALID assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm_1 or exitcond_fu_115_p2 or ap_sig_bdd_45 or ap_reg_ioackin_B_TREADY)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_115_p2 == ap_const_lv1_0) & ~ap_sig_bdd_45 & (ap_const_logic_0 == ap_reg_ioackin_B_TREADY))) begin
        B_TVALID = ap_const_logic_1;
    end else begin
        B_TVALID = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_60)
begin
    if (ap_sig_bdd_60) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_37)
begin
    if (ap_sig_bdd_37) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_B_TREADY assign process. ///
always @ (B_TREADY or ap_reg_ioackin_B_TREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_B_TREADY)) begin
        ap_sig_ioackin_B_TREADY = B_TREADY;
    end else begin
        ap_sig_ioackin_B_TREADY = ap_const_logic_1;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or exitcond_fu_115_p2 or ap_sig_bdd_45 or ap_sig_ioackin_B_TREADY)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st2_fsm_1;
        end
        ap_ST_st2_fsm_1 : 
        begin
            if ((~(ap_sig_bdd_45 | ((exitcond_fu_115_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY))) & ~(exitcond_fu_115_p2 == ap_const_lv1_0))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else if (((exitcond_fu_115_p2 == ap_const_lv1_0) & ~(ap_sig_bdd_45 | ((exitcond_fu_115_p2 == ap_const_lv1_0) & (ap_const_logic_0 == ap_sig_ioackin_B_TREADY))))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_TDATA = (A_TDATA + ap_const_lv32_5);
assign B_TDEST = A_TDEST;
assign B_TID = A_TID;
assign B_TKEEP = A_TKEEP;
assign B_TLAST = A_TLAST;
assign B_TSTRB = A_TSTRB;
assign B_TUSER = A_TUSER;

/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_37 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_37 = (ap_CS_fsm[ap_const_lv32_1] == ap_const_lv1_1);
end

/// ap_sig_bdd_45 assign process. ///
always @ (A_TVALID or exitcond_fu_115_p2)
begin
    ap_sig_bdd_45 = ((A_TVALID == ap_const_logic_0) & (exitcond_fu_115_p2 == ap_const_lv1_0));
end

/// ap_sig_bdd_60 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_60 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_0]);
end
assign exitcond_fu_115_p2 = (i_reg_103 == ap_const_lv6_32? 1'b1: 1'b0);
assign i_1_fu_121_p2 = (i_reg_103 + ap_const_lv6_1);


endmodule //tri_intersect

