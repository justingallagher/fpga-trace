-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity tri_intersect is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    A_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    A_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    B_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_TVALID : OUT STD_LOGIC;
    B_TREADY : IN STD_LOGIC;
    B_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    B_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of tri_intersect is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "tri_intersect,hls_ip_2015_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.440000,HLS_SYN_LAT=51,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=9,HLS_SYN_LUT=50}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal i_1_fu_121_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_37 : BOOLEAN;
    signal exitcond_fu_115_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_45 : BOOLEAN;
    signal ap_sig_ioackin_B_TREADY : STD_LOGIC;
    signal i_reg_103 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_60 : BOOLEAN;
    signal ap_reg_ioackin_B_TREADY : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_B_TREADY assign process. --
    ap_reg_ioackin_B_TREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_115_p2 = ap_const_lv1_0) and not((ap_sig_bdd_45 or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY))))))) then 
                    ap_reg_ioackin_B_TREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_115_p2 = ap_const_lv1_0) and not(ap_sig_bdd_45) and (ap_const_logic_1 = B_TREADY)))) then 
                    ap_reg_ioackin_B_TREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_103 assign process. --
    i_reg_103_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_115_p2 = ap_const_lv1_0) and not((ap_sig_bdd_45 or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY)))))) then 
                i_reg_103 <= i_1_fu_121_p2;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
                i_reg_103 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, exitcond_fu_115_p2, ap_sig_bdd_45, ap_sig_ioackin_B_TREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when ap_ST_st2_fsm_1 => 
                if ((not((ap_sig_bdd_45 or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY)))) and not((exitcond_fu_115_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                elsif (((exitcond_fu_115_p2 = ap_const_lv1_0) and not((ap_sig_bdd_45 or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY)))))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;

    -- A_TREADY assign process. --
    A_TREADY_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_115_p2, ap_sig_bdd_45, ap_sig_ioackin_B_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_115_p2 = ap_const_lv1_0) and not((ap_sig_bdd_45 or ((exitcond_fu_115_p2 = ap_const_lv1_0) and (ap_const_logic_0 = ap_sig_ioackin_B_TREADY))))))) then 
            A_TREADY <= ap_const_logic_1;
        else 
            A_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    B_TDATA <= std_logic_vector(unsigned(A_TDATA) + unsigned(ap_const_lv32_5));
    B_TDEST <= A_TDEST;
    B_TID <= A_TID;
    B_TKEEP <= A_TKEEP;
    B_TLAST <= A_TLAST;
    B_TSTRB <= A_TSTRB;
    B_TUSER <= A_TUSER;

    -- B_TVALID assign process. --
    B_TVALID_assign_proc : process(ap_sig_cseq_ST_st2_fsm_1, exitcond_fu_115_p2, ap_sig_bdd_45, ap_reg_ioackin_B_TREADY)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_115_p2 = ap_const_lv1_0) and not(ap_sig_bdd_45) and (ap_const_logic_0 = ap_reg_ioackin_B_TREADY)))) then 
            B_TVALID <= ap_const_logic_1;
        else 
            B_TVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_37 assign process. --
    ap_sig_bdd_37_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_37 <= (ap_CS_fsm(1 downto 1) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_45 assign process. --
    ap_sig_bdd_45_assign_proc : process(A_TVALID, exitcond_fu_115_p2)
    begin
                ap_sig_bdd_45 <= ((A_TVALID = ap_const_logic_0) and (exitcond_fu_115_p2 = ap_const_lv1_0));
    end process;


    -- ap_sig_bdd_60 assign process. --
    ap_sig_bdd_60_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_60 <= (ap_const_lv1_1 = ap_CS_fsm(0 downto 0));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_60)
    begin
        if (ap_sig_bdd_60) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_37)
    begin
        if (ap_sig_bdd_37) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_B_TREADY assign process. --
    ap_sig_ioackin_B_TREADY_assign_proc : process(B_TREADY, ap_reg_ioackin_B_TREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_B_TREADY)) then 
            ap_sig_ioackin_B_TREADY <= B_TREADY;
        else 
            ap_sig_ioackin_B_TREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_fu_115_p2 <= "1" when (i_reg_103 = ap_const_lv6_32) else "0";
    i_1_fu_121_p2 <= std_logic_vector(unsigned(i_reg_103) + unsigned(ap_const_lv6_1));
end behav;
