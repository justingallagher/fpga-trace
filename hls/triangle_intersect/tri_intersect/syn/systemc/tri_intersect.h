// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#ifndef _tri_intersect_HH_
#define _tri_intersect_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct tri_intersect : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > A_TDATA;
    sc_in< sc_logic > A_TVALID;
    sc_out< sc_logic > A_TREADY;
    sc_in< sc_lv<4> > A_TKEEP;
    sc_in< sc_lv<4> > A_TSTRB;
    sc_in< sc_lv<2> > A_TUSER;
    sc_in< sc_lv<1> > A_TLAST;
    sc_in< sc_lv<5> > A_TID;
    sc_in< sc_lv<6> > A_TDEST;
    sc_out< sc_lv<32> > B_TDATA;
    sc_out< sc_logic > B_TVALID;
    sc_in< sc_logic > B_TREADY;
    sc_out< sc_lv<4> > B_TKEEP;
    sc_out< sc_lv<4> > B_TSTRB;
    sc_out< sc_lv<2> > B_TUSER;
    sc_out< sc_lv<1> > B_TLAST;
    sc_out< sc_lv<5> > B_TID;
    sc_out< sc_lv<6> > B_TDEST;


    // Module declarations
    tri_intersect(sc_module_name name);
    SC_HAS_PROCESS(tri_intersect);

    ~tri_intersect();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<6> > i_1_fu_121_p2;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_sig_cseq_ST_st2_fsm_1;
    sc_signal< bool > ap_sig_bdd_37;
    sc_signal< sc_lv<1> > exitcond_fu_115_p2;
    sc_signal< bool > ap_sig_bdd_45;
    sc_signal< sc_logic > ap_sig_ioackin_B_TREADY;
    sc_signal< sc_lv<6> > i_reg_103;
    sc_signal< sc_logic > ap_sig_cseq_ST_st1_fsm_0;
    sc_signal< bool > ap_sig_bdd_60;
    sc_signal< sc_logic > ap_reg_ioackin_B_TREADY;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_st1_fsm_0;
    static const sc_lv<2> ap_ST_st2_fsm_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<6> ap_const_lv6_32;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_5;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_TREADY();
    void thread_B_TDATA();
    void thread_B_TDEST();
    void thread_B_TID();
    void thread_B_TKEEP();
    void thread_B_TLAST();
    void thread_B_TSTRB();
    void thread_B_TUSER();
    void thread_B_TVALID();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_bdd_37();
    void thread_ap_sig_bdd_45();
    void thread_ap_sig_bdd_60();
    void thread_ap_sig_cseq_ST_st1_fsm_0();
    void thread_ap_sig_cseq_ST_st2_fsm_1();
    void thread_ap_sig_ioackin_B_TREADY();
    void thread_exitcond_fu_115_p2();
    void thread_i_1_fu_121_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
